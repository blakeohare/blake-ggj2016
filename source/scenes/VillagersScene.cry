
ARENA_BOUNDS = [51.0 / SCREEN_WIDTH, 333.0 / SCREEN_HEIGHT, 925.0 / SCREEN_WIDTH, 525.0 / SCREEN_HEIGHT];

MONSTER_START = [.5, 234.0 / SCREEN_HEIGHT];

class VillagersScene : AbstractScene {
	constructor(enable_wizard) : base() {
		this.is_both = enable_wizard;
		this.enable_wizard = enable_wizard;
		
		this.show_bg_overlay = true;
		this.monster = new Sprite('M', MONSTER_START[0], MONSTER_START[1]);
		this.screen_shake_offset = 0;
		this.overlay = null;
		
		this.villagers = [];
		for (i = 1; i <= VILLAGER_COUNT; ++i) {
			this.villagers.add(new Sprite('V' + i, .1 + i / (3.0 + VILLAGER_COUNT), .7));
		}
		this.wizard = null;
		
		this.state = VillageState.INITIAL_DANCE;
		this.state_counter = 0;
		
		this.sprites = this.villagers + [this.monster];
		
		this.sprites_by_id = {};
		
		for (sprite : this.sprites) {
			this.sprites_by_id[sprite.id] = sprite;
		}
		
		this.bounds = [0, 0, SCREEN_WIDTH, SCREEN_HEIGHT];
		
		this.device_ids_configured = [];
		for (i = 0; i < $gamepad_count(); ++i) {
			device = $gamepad_get_device(i);
			device_id = device.id;
			if (device_id != null) {
				this.device_ids_configured.add(device_id);
			}
		}
		
		this.bg = IMAGES.get('island.png');
		this.bg_overlay = IMAGES.get('island-overlay.png');
		
		this.monster.faces = {
			'normal': {
				's': IMAGES.get('monster/s.png'),
				'se': IMAGES.get('monster/se.png'),
				'sw': IMAGES.get('monster/sw.png'),
				'e': IMAGES.get('monster/e.png'),
				'w': IMAGES.get('monster/w.png'),
			},
			'attacking': {
				's': IMAGES.get('monster/fire/s.png'),
				'se': IMAGES.get('monster/fire/se.png'),
				'sw': IMAGES.get('monster/fire/sw.png'),
				'e': IMAGES.get('monster/fire/e.png'),
				'w': IMAGES.get('monster/fire/w.png'),
			},
		};
		
		this.counter = 0;
	}
	
	function throw_spear(sprite) {
		sprite.spear_cooldown = 5;
		theta = sprite.theta;
		spear = new Sprite('spear', sprite.x, sprite.y - sprite.radius * 2);
		dx = $cos(theta) * spear.v;
		dy = -$sin(theta) * spear.v;
		spear.locked_dxdy = [dx, dy];
		
		for (i = 0; i < 3; ++i) {
			// hack. move the spear a bit before adding it to the scene.
			spear.update();
		}
		this.sprites.add(spear);
		
	}
	
	function set_state(state) {
		this.state = state;
		this.state_counter = 0;
	}
	
	function update(events, mx, my) {
	
		allow_input = true;
		switch (this.state) {
			case VillageState.INITIAL_DANCE:
				this.show_bg_overlay = true;
				allow_input = false;
				i = 0;
				for (villager : this.villagers) {
					villager.z_offset = $floor($abs($cos(this.counter * TWO_PI / (2 * FPS) + (i % 2 == 0 ? 0 : 1) * (PI / 4))) * 20);
					++i;
				}
				
				if (this.state_counter == 3 * FPS / CUTSCENE_SPEED_RATIO) {
					SOUNDS.play_sound('sounds/here-we-have.ogg');
					this.overlay = [
						'Here we have the people of the g2d ellipse tribe,',
						'performing their ritual dance to appease Molikaw',
						'Niwatanthatu\'a, the Lord of the Volcano.'];
				} else if (this.state_counter == FPS * 13 / CUTSCENE_SPEED_RATIO) {
					SOUNDS.play_sound('sounds/tuesday-around-noon.ogg');
					this.overlay = [
						'They perform this dance whenever Molikaw',
						'Niwatanthatu\'a beomces angry, which occurs',
						'every Tuesday around noon.'
						];
				} else if (this.state_counter == FPS * 20 / CUTSCENE_SPEED_RATIO) {
					SOUNDS.play_sound('sounds/cruise-ships-arrive.ogg');
					this.overlay = [
						'...which is coincidentally when the cruise',
						'ships generally arrive.',
					];
				} else if (this.state_counter == FPS * 25 / CUTSCENE_SPEED_RATIO) {
					this.overlay = null;
					this.set_state(VillageState.TRIP_FALL);
				}
				
				break;
			case VillageState.TRIP_FALL:
				
				if (this.state_counter == FPS) {
					SOUNDS.play_sound('sounds/foulest-of-moods.ogg');
					this.overlay = [
						'One villager falls over. This has displeased',
						'Molikaw Niwatanthatu\'a and so he emerges from',
						'his cave in the foulest of moods.'
					];
				} else if (this.state_counter == FPS * 9 / CUTSCENE_SPEED_RATIO) {
					this.overlay = null;
					this.set_state(VillageState.SCREEN_SHAKE);
				}
				
				i = 0;
				for (villager : this.villagers) {
					if (i == 3) {
						villager.z_offset = villager.z_offset * 4 / 5;
					} else {
						villager.z_offset = $floor($abs($cos(this.counter * TWO_PI / (2 * FPS) + (i % 2 == 0 ? 0 : 1) * (PI / 4))) * 20);
					}
					++i;
				}
				
				allow_input = false;
				break;
			case VillageState.SCREEN_SHAKE:
				if (this.state_counter == FPS * 3) {
					this.set_state(VillageState.MONSTER_EMERGE);
				}
				
				for (villager : this.villagers) {
					villager.z_offset = villager.z_offset * 19 / 20;
				}
				
				this.screen_shake_offset = $floor($sin(this.state_counter * TWO_PI / 5) * 10);
				allow_input = false;
				break;
			case VillageState.MONSTER_EMERGE:
				allow_input = false;
				this.screen_shake_offset = 0;
				
				if (this.state_counter < 2) {
					this.monster.target_coord = [.5, .595];
					//$print("Setting coord!");
				} else {
					//$print(this.monster.x + ', ' + this.monster.y);
					this.monster.dx = 0;
					this.monster.dy = 0;
					if (this.monster.target_coord == null) {
						//$print("DONE");
						this.set_state(VillageState.FIGHT_START);
					}
				}
				break;
			case VillageState.FIGHT_START:
				//$print("Fight start");
				this.show_bg_overlay = false;
				allow_input = true;
				if (this.state_counter == 1) {
					SOUNDS.play_sound('sounds/a-button.ogg');
					this.overlay = [
						'Now the villagers must throw their spears with',
						'the A button to drive the Volcano Lord back to',
						'his cave.'
						];
				} else if (this.state_counter == FPS * 6 / CUTSCENE_SPEED_RATIO) {
					this.overlay = null;
					this.set_state(VillageState.FIGHT_NO_WIZARD);
				}
				break;
			case VillageState.FIGHT_NO_WIZARD:
				//$print('fight no wizard');
				allow_input = true;
				if (!this.are_any_villagers_alive()) {
					this.set_state(VillageState.MONSTER_WIN);
				} else {
					if (this.enable_wizard) {
						if (this.monster.life_percent < .5) {
							this.set_state(VillageState.WIZARD_APPEARS);
						}
					} else {
						if (this.monster.life_percent < .001) {
							this.set_state(VillageState.VILLAGER_WIN);
							this.monster.target_coord = [.5, .595];
						}
					}
				}
				break;
			case VillageState.WIZARD_APPEARS:
				if (this.state_counter == 2) {
					this.monster.invincible = true;
					SOUNDS.play_sound('sounds/no-longer-phased.ogg');
					this.overlay = [
						'Molikaw Niwatanthatu\'a has become even more',
						'enraged and is no longer phased by the spears.'
					];
				} else if (this.state_counter == FPS * 5 / CUTSCENE_SPEED_RATIO) {
					this.overlay = null;
				} else if (this.state_counter == FPS * 10 / CUTSCENE_SPEED_RATIO) {
					allow_input = false;
					SOUNDS.play_sound('sounds/wizard-out-of-nowhere.ogg');
					this.overlay = [
						'Suddenly, out of nowhere a Wizard appears to',
						'aid the villagers. '
					];
					// Add wizard sprite.
					wizard = new Sprite('V13', .9, .8);
					wizard.z_offset = SCREEN_HEIGHT;
					this.sprites.add(wizard);
					this.villagers.add(wizard);
					this.wizard = wizard;
				} else if (this.wizard != null && this.wizard.z_offset == 0) {
					effective_counter = this.state_counter - this.wizard_last_fall;
					if (effective_counter == FPS / CUTSCENE_SPEED_RATIO) {
						SOUNDS.play_sound('sounds/rally-around.ogg');
						this.overlay = [
							'Quickly, the villagers rally around the',
							'wizard to protect him while he casts his',
							'spells.'
						];
					} else if (effective_counter == FPS * 6 / CUTSCENE_SPEED_RATIO) {
						SOUNDS.play_sound('sounds/entirely-up-to-the-wizard.ogg');
						this.overlay = [
							'It is entirely up to the wizard to finish',
							'casting his spells to defeat Molikaw',
							'Niwatanthatu\'a.'
						];
					} else if (effective_counter == FPS * 12 / CUTSCENE_SPEED_RATIO) {
						this.overlay = null;
						// despite switching scenes, the TraceScene will maintain a referene to this scene and continue to 
						// call update and render in the background.
						this.switch_scene(new TraceScene(this, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT));
						this.set_state(VillageState.FIGHT_WITH_WIZARD);
					}
					
				}
				
				if (this.wizard != null) {
					if (this.wizard.z_offset > 0) {
						this.wizard.z_offset -= 5 * CUTSCENE_SPEED_RATIO;
						this.wizard_last_fall = this.state_counter;
						if (this.wizard.z_offset < 0) this.wizard.z_offset = 0;
					}
				}
				break;
			case VillageState.FIGHT_WITH_WIZARD:
				break;
			case VillageState.VILLAGER_WIN:
			case VillageState.WIZARD_WIN:
				
				allow_input = false;
				if (this.monster.target_coord == null) {
					this.show_bg_overlay = true;
					if (this.monster.y < .3) {
						if (this.state_counter > FPS * 10 / CUTSCENE_SPEED_RATIO) {
							if (this.state == VillageState.WIZARD_WIN) {
								if (this.wizard.z_offset > SCREEN_HEIGHT) {
									if (ASTEROIDS_ENABLED) {
										this.switch_scene(new AsteroidsScene());
									} else {
										this.switch_scene(new TitleScene());
									}
								}
							} else {
								this.switch_scene(new TitleScene());
							}
						}
					} else {
						this.monster.target_coord = [.5, .2];
					}
				}
				
				if (this.state == VillageState.WIZARD_WIN) {
					if (this.state_counter == 2) {
						SOUNDS.play_sound('sounds/wizards-work-complete.ogg');
						this.overlay = [
							'The wizard\'s work is now complete. It is',
							'now safe to him to return to his spaceship',
						];
					}
					
					this.wizard.z_offset += 5;
				} else {
					if (this.state_counter == 2) {
						SOUNDS.play_sound('sounds/villagers-successful.ogg');
						this.overlay = [
							'The villagers have successfully deterred Molikaw',
							'Niwatanthatu\'a, who now retreats into his cave',
							'until the next Tuesday.'
						];
					}
				}
				break;
			case VillageState.MONSTER_WIN:
				if (this.state_counter == FPS / CUTSCENE_SPEED_RATIO) {
					SOUNDS.play_sound('sounds/sadness.ogg');
					this.overlay = [
						'Molikaw Niwatanthatu\'a, realizing his rage has',
						'resulted in no longer having any friends to play',
						'with, is now overcome with sadness.'
					];
				} else if (this.state_counter == FPS * 8 / CUTSCENE_SPEED_RATIO) {
					this.switch_scene(new TitleScene());
				}
				break;
			default:
				$assert(false, "Unknown state.");
				break;
		}
	
		if (allow_input) {
			for (event : events) {
				if (event.is_gamepad && event.name == 'attack') {
					player_id = CONTEXT.config_id_to_game_id.get(event.device.id, null);
					if (player_id != null) {
						sprite = this.sprites_by_id.get(player_id, null);
						if (sprite.is_monster) {
							sprite.is_attacking = event.value;
						} else if (sprite.is_villager) {
							if (event.value && sprite.spear_cooldown < 0) {
								this.throw_spear(sprite);
							}
						}
					}
				}
			}
			
			//$print('allowing input...');
			for (device_id : this.device_ids_configured) {
				dir = $gamepad_get_state(device_id, 'dir');
				
				player_id = CONTEXT.config_id_to_game_id.get(device_id, null);
				if (player_id != null) {
					sprite = this.sprites_by_id.get(player_id, null);
					if (sprite != null) {
						sprite.dx = dir[0] * sprite.v;
						sprite.dy = dir[1] * sprite.v;
					}
				}
			}
		}
		
		if (!this.monster.is_dead && this.monster.is_attacking) {
			if (this.counter % 3 == 0) {
				monster = this.monster;
				angle = 3.14159 * 2 / 8;
				theta = monster.theta + angle * ($random() - .5);
				fire = new Sprite('fire', monster.x, monster.y - .00001);
				dx = $cos(theta) * fire.v;
				dy = -$sin(theta) * fire.v;
				fire.locked_dxdy = [dx, dy];
				this.sprites.add(fire);
			}
		}
		
		new_sprites = [];
		spears = [];
		fires = [];
		villagers = [];
		
		for (sprite : this.sprites) {
			if (!sprite.is_dead) {
				sprite.update();
				if (!sprite.is_dead) {
					new_sprites.add(sprite);
					
					if (sprite.is_spear) {
						spears.add(sprite);
					} else if (sprite.is_fire) {
						fires.add(sprite);
					} else if (sprite.is_villager) {
						villagers.add(sprite);
					}
				}
			}
		}
		this.sprites = new_sprites;
		monsterx = this.monster.x;
		monstery = this.monster.y;
		monster_radius = this.monster.radius ** 2;
		for (spear : spears) {
			dist = (monsterx - spear.x) ** 2 + (monstery - spear.y) ** 2;
			if (dist < monster_radius) {
				spear.is_dead = true;
				if (!this.monster.invincible) {
					this.monster.take_damage(0.01 * SPEAR_POWER_RATIO);
				}
			}
		}
		
		
		vr = VILLAGER_RADIUS * 2;
		vr_squared = vr ** 2;
		for (fire : fires) {
			fire_x = fire.x;
			for (villager : this.villagers) {
				if (!villager.is_dead) {
					dx = $abs(villager.x - fire_x);
					if (dx < vr) {
						dist = (villager.y - fire.y) ** 2 + dx ** 2;
						if (dist < vr_squared) {
							fire.is_dead = true;
							if (villager.on_fire_counter < 0) {
								villager.on_fire_counter = FPS / 2;
							}
						}
					}
				}
			}
		}
		
		this.counter++;
		this.state_counter++;
	}
	
	function are_any_villagers_alive() {
		for (villager : this.villagers) {
			if (!villager.is_dead) {
				return true;
			}
		}
		return false;
	}
	
	function render_hud() {
		this.render_meter(this.monster, 0, 0, SCREEN_WIDTH, 25);
		for (i = 0; i < VILLAGER_COUNT; ++i) {
			sprite = this.sprites_by_id['V' + (i + 1)];
			x = SCREEN_WIDTH * i / VILLAGER_COUNT;
			x2 = SCREEN_WIDTH * (i + 1) / VILLAGER_COUNT;
			this.render_meter(sprite, x, 25, x2 - x, 25);
		}
		
		LINE_WIDTH = 10;
		LEFT = 10;
		WIDTH = 60;
		HEIGHT = 100;
		BOTTOM = SCREEN_HEIGHT - 10;
		
		TOP = BOTTOM - HEIGHT;
		RIGHT = LEFT + WIDTH;
		
		r = 255;
		g = 128;
		b = 0;
		
		$gfx_draw_rectangle(LEFT, TOP, LINE_WIDTH, HEIGHT, r, g, b, 255);
		$gfx_draw_rectangle(RIGHT - LINE_WIDTH, TOP, LINE_WIDTH, HEIGHT, r, g, b, 255);
		$gfx_draw_rectangle(LEFT, TOP, WIDTH, LINE_WIDTH, r, g, b, 255);
		$gfx_draw_rectangle(LEFT, BOTTOM - LINE_WIDTH, WIDTH, LINE_WIDTH, r, g, b, 255);
		
		x = RIGHT + 10;
		coords = TEXT.render('white-L', 'Rational', x, TOP + 2);
		TEXT.render('white-L', 'Geometric', x, coords[1]);
	}
	
	function render_meter(sprite, x, y, width, height) {
		$gfx_draw_rectangle(x, y, width, height, 0, 0, 0, 255);
		life = sprite.life_percent;
		if (life > 1) life = 1;
		else if (life < 0) life = 0;
		meter_width = $floor(life * (width - 2));
		color = sprite.color;
		r = color[0];
		g = color[1];
		b = color[2];
		if (r == 0 && g == 0 && b == 0) {
			color = [50, 50, 50];
		}
		$gfx_draw_rectangle(x + 1, y + 1, meter_width, height - 2, color[0], color[1], color[2], 255);
		color = sprite.dark_color;
		bottom = y + height - 2;
		$gfx_draw_rectangle(x + 1, bottom - 4, meter_width, 5, color[0], color[1], color[2], 255);
	}
	
	function render(rc) {
		$gfx_blit_image(this.bg, this.screen_shake_offset, 0);
		
		sorted_sprites = this.quick_sort(this.sprites);
		
		this.bounds[0] = this.screen_shake_offset;
		
		for (sprite : sorted_sprites) {
			sprite.window_bounds = this.bounds;
			sprite.render(rc);
		}
		
		if (this.show_bg_overlay) {
			$gfx_blit_image(this.bg_overlay, this.screen_shake_offset, 0);
		}
		
		this.render_hud();
		
		if (this.overlay != null) {
			x = 30;
			y = 60;
			
			$gfx_draw_rectangle(0, y, SCREEN_WIDTH, 120, 255, 255, 255, 100);
			for (line : this.overlay) {
				coord = TEXT.render('black-M', line, x, y);
				y = coord[1];
			}
		}
	}
	
	function quick_sort(sprites) {
		if (sprites.length < 3) {
			if (sprites.length == 2) {
				if (sprites[0].y > sprites[1].y) return sprites[::-1];
			}
			return sprites;
		}
		
		pivot = sprites[0].y;
		left = [];
		right = [];
		for (i = sprites.length - 1; i > 0; --i) {
			sprite = sprites[i];
			if (sprites[i].y < pivot) {
				left.add(sprite);
			} else {
				right.add(sprite);
			}
		}
		left = this.quick_sort(left);
		right = this.quick_sort(right);
		output = left + [sprites[0]];
		output.concat(right);
		return output;
	}
}